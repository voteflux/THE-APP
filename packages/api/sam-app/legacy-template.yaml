AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "flux sam-app stack"

Parameters:
  # pNamePrefix:
  #   Type: String
  pHostedZoneId:
    Type: String
  pSubdomain:
    Type: String
  pDomain:
    Type: String
  pCertificateArn:
    Type: String
  pStage:
    Type: String
  pFeedbackEmail:
    Type: String
  pQandaFromEmail:
    Type: String
  pSiteNameShort:
    Type: String
  pBaseUrl:
    Type: String


Conditions:
  cIsProd: { "Fn::Equals": [{ "Ref": "pStage"}, 'prod' ]}


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 120
    MemorySize: 256
  Api:
    Cors: # "'*'"
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Referer'"
      AllowOrigin: "'*'"
    EndpointConfiguration: REGIONAL


Resources:

  rBaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${pNamePrefix}-function-base-layer
      ContentUri: ./libs
      CompatibleRuntimes:
        - python3.6


  rCorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: funcs/cors
      Handler: index.cors
      Runtime: python3.6
      Role: !GetAtt rCorsFuncRole.Arn
      Events:
        CorsOption:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: options


  rCorsFuncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pNamePrefix}-cors-lambda-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"


  rQandaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "funcs/qanda"
      Handler: "index.qanda"
      Runtime: "python3.6"
      Role: !GetAtt rQandaFuncRole.Arn
      Layers:
        - !Ref rBaseLayer
      Environment:
        Variables:
          MONGODB_URI: ""
          pNamePrefix: !Ref pNamePrefix
          pQandaFromEmail: !Ref pQandaFromEmail
          pSiteNameShort: !Ref pSiteNameShort
          pFeedbackEmail: !Ref pFeedbackEmail
          pBaseUrl: !Ref pBaseUrl
      Events:
        GetMyQs:
          Type: Api
          Properties:
            Path: /qanda/getMine
            Method: post
        SubmitQ:
          Type: Api
          Properties:
            Path: /qanda/submit
            Method: post
        SubmitReply:
          Type: Api
          Properties:
            Path: /qanda/submitReply
            Method: post
        GetAllQs:
          Type: Api
          Properties:
            Path: /qanda/get
            Method: get
        GetQ:
          Type: Api
          Properties:
            Path: /qanda/question/{qid}
            Method: get
        GetReplyIds:
          Type: Api
          Properties:
            Path: /qanda/replyIds/{qid}
            Method: get
        GetReply:
          Type: Api
          Properties:
            Path: /qanda/reply/{rid}
            Method: get


  rQandaFuncPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${pNamePrefix}-qanda-lambda-policy
      Roles:
        - !Ref rQandaFuncRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:DecryptParameter
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${pNamePrefix}-mongodb-uri'
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pNamePrefix}-qanda-*
              # - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pNamePrefix}-*
          - Effect: Allow
            Action:
              - ses:SendEmail
            Resource:
              - !Sub arn:aws:ses:us-east-1:${AWS::AccountId}:identity/${pQandaFromEmail}
#          - Effect: Allow
#            Action:
#              - logs:CreateLogGroup
#              - logs:CreateLogStream
#              - logs:PutLogEvents
#            Resource:
#              - "*"

  rQandaFuncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pNamePrefix}-qanda-lambda-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"

  rUserQuestionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${pNamePrefix}-qanda-user-qs-ddb
      ProvisionedThroughput: !If [cIsProd, !Ref "AWS::NoValue", {
        ReadCapacityUnits: 5, WriteCapacityUnits: 5
      }]
      PrimaryKey:
        Name: uid
        Type: String
      SSESpecification:
        SSEEnabled: True

  rQuestionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${pNamePrefix}-qanda-questions-ddb
      ProvisionedThroughput: !If [cIsProd, !Ref "AWS::NoValue", {
        ReadCapacityUnits: 5, WriteCapacityUnits: 5
      }]
      PrimaryKey:
        Name: qid
        Type: String
      SSESpecification:
        SSEEnabled: True

  rReplyIdsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${pNamePrefix}-qanda-reply-ids-ddb
      ProvisionedThroughput: !If [cIsProd, !Ref "AWS::NoValue", {
        ReadCapacityUnits: 5, WriteCapacityUnits: 5
      }]
      PrimaryKey:
        Name: qid
        Type: String
      SSESpecification:
        SSEEnabled: True

  rReplyIdsByUidTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${pNamePrefix}-qanda-reply-ids-by-uid-ddb
      ProvisionedThroughput: !If [cIsProd, !Ref "AWS::NoValue", {
        ReadCapacityUnits: 5, WriteCapacityUnits: 5
      }]
      PrimaryKey:
        Name: qid
        Type: String
      SSESpecification:
        SSEEnabled: True

  rRepliesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${pNamePrefix}-qanda-replies-ddb
      ProvisionedThroughput: !If [cIsProd, !Ref "AWS::NoValue", {
        ReadCapacityUnits: 5, WriteCapacityUnits: 5
      }]
      PrimaryKey:
        Name: rid
        Type: String
      SSESpecification:
        SSEEnabled: True

  rApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "api.${pSubdomain}.${pDomain}"
      RegionalCertificateArn: !Ref pCertificateArn
      EndpointConfiguration: { Types: [REGIONAL] }

  rApiDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub api.${pSubdomain}.${pDomain}.
      HostedZoneName: !Sub ${pDomain}.
      AliasTarget:
        DNSName: !GetAtt rApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt rApiDomain.RegionalHostedZoneId
      Type: A

  rQandaApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref rApiDomain
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref ServerlessRestApi.Stage

  # rOauthStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     # StackName: !Sub "${pNamePrefix}-oauth-stack"
  #     TemplateURL: "./stack/oauth.yaml"
  #     Parameters:
  #       pNamePrefix: !Ref pNamePrefix
  #       pApigDomain: !Ref rApiDomain
  #       pRestApi: !Ref ServerlessRestApi
  #       pApiStage: !Ref ServerlessRestApi.Stage
  #       pStage: !Ref pStage
  #       pFeedbackEmail: !Ref pFeedbackEmail
  #       pSiteNameShort: !Ref pSiteNameShort
  #       pBaseLayer: !Ref rBaseLayer

Outputs:

#    oQandaApi:
#      Description: "API Gateway endpoint URL for Q And A lambda"
#      Value: !Sub "https://${rQandaApi}.execute-api.${AWS::Region}.amazonaws.com/${rQandaApi.Stage}/hello/"

    oQandaFunction:
      Description: "Hello World Lambda Function ARN"
      Value: !GetAtt rQandaFunction.Arn
#
#    HelloWorldFunctionIamRole:
#      Description: "Implicit IAM Role created for Hello World function"
#      Value: !GetAtt HelloWorldFunctionRole.Arn
