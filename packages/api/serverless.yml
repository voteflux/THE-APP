# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: flux-api-2

plugins:
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts
  - serverless-offline

package:
  exclude:
    - dev-mongo-data/**
    - flux-ts/**
    - bin/**
    - .dynamodb/**

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  defaults:
    profile: 'flux-api'
  # profile: ${file(./sls-custom.yml):profile}
  stage: ${file(./sls-custom.yml):stage}
  # region: ${file(./sls-custom.yml):region}
  customDomain: ${file(./sls-${self:provider.stage}-domain.yml)}
  # cognito: ${file(./sls-${self:provider.stage}-cognito.yml):cognito}
  iam:
    cognitoAdmin:
      - Effect: "Allow"
        Action: "cognito-idp:*"
        Resource: "arn:aws:cognito-idp:*:*:userpool/*"
  alerts: ${file(./sls-alerts.yaml):alerts}
  # this is separated out because the structure changed; better to put it here
  handlers: "flux/handlers"

provider:
  name: aws
  # region should be us-east-1 for prod
  # region: ap-southeast-2
  region: us-east-1
  runtime: nodejs8.10
  profile: ${self:custom.profile, self:custom.defaults.profile}
  stage: ${opt:stage, self:custom.stage}
  memorySize: 128
  environment:
    MONGODB_URI: ${ssm:${self:provider.stage}MongoDbUri, 'mongodb://localhost:53799/flux'}
    STAGE: ${self:provider.stage}
    # USER_POOL_ID: ${self:custom.cognito.poolId}
    # CLIENT_ID: ${self:custom.cognito.clientId}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**



functions:
  # stats
  genStatsGetinfo:
    handler: ${self:custom.handlers}/stats.genStatsGetinfo
    timeout: 60
    events:
      - schedule: rate(1 minute)
  genStatsPublic:
    handler: ${self:custom.handlers}/stats.genStatsPublic
    timeout: 60
    events:
      - schedule: rate(1 minute)
  # user requests
  getRoles:
    handler: ${self:custom.handlers}/user.getRoles
    events:
      - http:
          path: /v2/user/getRoles
          method: post
          cors: true
  # admin/finance requests
  getDonations:
    handler: ${self:custom.handlers}/admin-finance.getDonations
    events:
      - http:
          path: /v2/finance/getDonations
          method: post
          cors: true
  addNewDonation:
    handler: ${self:custom.handlers}/admin-finance.addNewDonation
    events:
      - http:
          path: /v2/finance/addNewDonation
          method: post
          cors: true
  # admin/role requests
  getRoleAudit:
    handler: ${self:custom.handlers}/admin-roles.getRoleAudit
    events:
      - http:
          path: /v2/admin/getRoleAudit
          method: post
          cors: true
  # admin/other requests

  # random stuff from past

  # checkEmail:
  #   handler: ${self:custom.handlers}/login.checkEmail
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements: ${self:custom.iam.cognitoAdmin}
  #   events:
  #     - http:
  #         path: /user/check_email
  #         method: post


  # getStats:
  #   handler: handler.getStats
  #   events:
  #     - http:
  #       path: /stats/{id}
  #       method: get



#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
