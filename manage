#!/bin/bash
set -e


if [ "$NETLIFY_BUILD_BASE" ]; then
    echo 'Netlify detected'
    echo -e "\n\n###\n\n"
    env
    echo -e "\n\n###\n\n"
    export IS_NETLIFY="true"
    git remote add origin $(echo "https://$REPOSITORY_URL" | sed 's/\.com:/.com\//g' | sed 's/git@//g') || true
    git fetch --tags origin
else
    echo "Detected: not on netlify"
fi


_error=false
if python3 -m pip --version >/dev/null 2>&1; then
    echo 'Found pip3'
    if [ "$NETLIFY_BUILD_BASE" ]; then
        python3 -m pip install virtualenv
    fi
else
    echo "Error: 'python3 -m pip' must be available on path"
    _error=true
fi
if python3 -m virtualenv --version >/dev/null 2>&1; then
    echo 'Found virtualenv'
else
    echo "Error: 'python3 -m virtualenv' must work"
    echo "try 'pip3 install virtualenv' or 'sudo apt install python3-virtualenv'"
    _error=true
fi
if which npm >/dev/null 2>&1; then
    echo 'Found npm'
else
    echo "Error: npm must be available on path"
    echo "Please install Node v8 or higher"
    _error=true
fi
if tmux -V >/dev/null 2>&1; then
    echo 'Found tmux'
    if [ ! "$(grep 'destroy-unattached' ~/.tmux.conf)" ]; then
        echo "set -g destroy-unattached off" >> ~/.tmux.conf
    fi
else
    echo "WARNING: tmux must be available for './manage dev' commands"
    echo "Try 'sudo apt install tmux' or 'brew install tmux'"
fi


if $_error; then
    exit 1
fi


if [ ! -e 'packages/api/sls-custom.yml' ]; then
    cp packages/api/sls-custom.yml.default packages/api/sls-custom.yml
    echo 'Please edit packages/api/sls-custom.yml if you intend to do any API work.'
fi


if [ ! -e "$HOME/.aws/credentials" ]; then
    mkdir -p ~/.aws
    cat <<EOF >> ~/.aws/credentials
[default]
aws_secret_access_key = 1234
aws_access_key_id = 5678
EOF
    echo "⚠ NOTE: I've added a default ~/.aws/credentials file for you"
fi


if [ ! -d '.venv' ]; then
    echo "Creating virtualenv"
    python3 -m virtualenv .venv --python=python3
    echo "Created virtualenv in .venv"
fi

source .venv/bin/activate

export MOST_RECENT_TAG="$(git describe --abbrev=0)"

echo -e "\n\n⚠️ Most recent tag: $MOST_RECENT_TAG\n"

if [ "$IS_NETLIFY" ]; then
    echo -e "\tgit describe:"
    git describe
    echo -e "\tgit rev-list --tags | head -n 10:"
    git rev-list --tags | head -n 10
    echo -e '\n\tgit describe --tags $(git rev-list --tags) --always | head -n 10:'
    git describe --tags $(git rev-list --tags) --always | head -n 10
fi

echo -e "\n\n⚠️ About to run app-manager ⚠️\n"

python3 -m py_app_manager "$@"; exit "$?"
